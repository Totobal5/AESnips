0.1.2
{
	-Allow anonymous functions to be used in frame and Snip end scripts
	-Allow values to be passed into frame and Snip end scripts
}

0.1.3
{

!!!!!!!!
!!! Steps to update from 0.1.2:
!!! Remove snip_animation_end_event() from the Animation End event in all object
!!! Replace any boolean "should repeat" in snip_create_ext() value with a value from the new ae_snip_end enum
!!! Replace snip_set_repeat() with snip_set_end_type()
!!!!!!!!

	-You no longer need to add snip_animation_end_event() to your objects
	-Allow Snips to be marked to play backwards with snip_set_backward/snip_set_forward/snip_reverse
			-Snips that will be played backwards will still work with loops
			-Snip and frame speeds should always be positive
	-Changed the way Snips behave when finished playing. Instead of just a boolean
		indicating whether or not to repeat, now it's an enum with 7 different options:
			-ae_snip_end.end_stop //Freeze on the completed frame
			-ae_snip_end.end_stop_head //Jump to first frame and freeze
			-ae_snip_end.end_stop_tail //Jump to last frame and freeze
			-ae_snip_end.end_repeat //Jump to first frame and play again
			-ae_snip_end.end_pingpong //Play the animation forwards and backwards
			-ae_snip_end.end_pingpong_head //Same as pingpong with different end points
			-ae_snip_end.end_pingpong_tail	//Same as pingpong with different end points
	-Allow Snips to pingpong back and forth when they finish playing
		-Three types of pinpong are available to determine when the Snip is "completed"
			-pingpong: The Snip is completed when it gets to the first or last frame
			-pingpong_head: The Snip is completed when it plays the first frame
			-pingpong_tail: The Snip us completed when it plays the last frame
		-When a Snip completes it will execute the completion script, and then try to play the next Snip
			if there is not another Snip to play then look at the Snip end type to determine what to do (stop/repeat/pingpong)
	-Fixed snip_draw_debug to always draw a sprite in the proper place despite the axis position
	-Added snip_speed_scale property to handle different sprite speeds
	-Added snip_clone_transitions() to make all Transisions that apply to one Snip apply to another
	-Added snip_clone_loops() to make all Loops that apply to one Snip apply to another (except for any Loops outside the destination Snip's bounds)
	-Added snip_play_request(). It will only play the given Snip if that Snip isn't currently playing
	-Added snip_stop(), snip_stop_head() and snip_stop_tail() to stop the Snips immediatly. Use head or tail to jump to the first or last frame (tail->last, head->first)
	-Added snip_cancel_play_next()
	-Made sure Snips are fully compatible with speeds set in the Sprite/Image editor
	-Fixed snip_clone errors
}

0.1.4
{
	!!!!!!!!
	!!! Steps to update from 0.1.3:
	!!! Trying to set a Snip's speed to a value less than 0 will throw an error, replace any negative speed values with a positive value and add snip_set_backward()
	!!!!!!!!

	-Added SnipPlayer struct to play Snips
		-Objects can still play Snips without the need for a SnipPlayer
		-Add SnipPlayers to an object to allow the object to play multiple Snips at the same time
		-Each SnipPlayer needs to be added to the Step event in order to animate and the Draw event to be drawn
		-SnipPlayers use similar playback functions, but must be preceeded by the SnipPlayer instance for example: my_snip_player.snip_play(my_snip)
	-Added an ae_snip_direction variable to objects that play Snips.
		-A PingPong style Snip can be played by multiple objects without one instance of the Snip impacting the other
		-Setting a Snip's speed to a value less than 0 will throw an error
		
	TODO:
	///-All functions should now be accessible via the function(instance, args) syntax
			and the instance.function(args) syntax
}

0.1.5 by toto
{
	Now only constructors
}

2.0.0 by toto
{
	* update to IDE v2024.13.1.193  Runtime v2024.13.1.242 
	* new refactor
}